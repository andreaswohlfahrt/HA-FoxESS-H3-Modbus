# FoxESS Modbus H3 Plugin - Configuration and Sensor Mappings
# Adapted by: https://github.com/rsaemann/HA-FoxESS-H3-Modbus
# Original Source https://github.com/StealthChesnut/HA-FoxESS-Modbus
# This file isn't a valid configuration file!

# Instructions:
# copy the custom_components directory to your HA custom_components directory
# Add the modbus: lines to your configuration.yaml
# Add the sensors below to your configuration.yaml sensor section
#

# This defines where your HA looks up the credentials and sensor definition for the inverter
# Only use ONE of the following two lines:
modbus: !include custom_components/HA-FoxESS-Modbus/modbusH3USB.yaml  #if you go with RS485 cable to usb
modbus: !include custom_components/HA-FoxESS-Modbus/modbusLAN-H3.yaml  #if you go with RS485 WiFi

#Sensors turn power values into power/hour values for meters
sensor: 
  - method: left
    name: pv1_sum
    platform: integration
    round: 2
    source: sensor.pv1_power
    unit_time: h
  - method: left
    name: pv2_sum
    platform: integration
    round: 2
    source: sensor.pv2_power
    unit_time: h

 #Templates enable math operations against states/values to give us better data
template:
  - sensor:  #Sensors without triggers change every time when a participating state changes
      - name: "Battery Discharge"  #absolute value. 0 when charging
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.battery_discharge_power') | float(default=0) ) > 0 %}
            {{ states('sensor.battery_discharge_power') | float(default=0) * 1 }}
            {% else %}
            0 
            {% endif %}
      - name: "Battery Charge"   #absolute value. 0 when discharging
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.battery_discharge_power') | float(default=0) ) < 0 %}
            {{ states('sensor.battery_discharge_power') | float(default=0) * -1 }}
            {% else %}
            0 
            {% endif %}

      - name: "Inverter Feed In Power"  #positive or zero
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.inverter_load_power') | float(default=0) ) > 0 %}
            {{ states('sensor.inverter_load_power') | float(default=0) }}
            {% else %}
            0 
            {% endif %}
      - name: "Inverter Grid Consumption"  #positive or zero
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.inverter_load_power') | float(default=0) ) < 0 %}
            {{ states('sensor.inverter_load_power') | float(default=0) * -1 }}
            {% else %}
            0 
            {% endif %}

      - name: "Inverter State String"
        unique_id: foxess_inv1_state_string
        state: >
            {% if (states('sensor.inverter_state_code'))  == "0" %}
            Waiting
            {% elif (states('sensor.inverter_state_code')) == "1"%}
            Selfcheck
            {% elif (states('sensor.inverter_state_code')) == "2"%}
            Ongrid 
            {% elif (states('sensor.inverter_state_code')) == "3"%}
            EPS 
            {% elif (states('sensor.inverter_state_code')) == "4"%}
            Fault  
            {% elif (states('sensor.inverter_state_code')) == "5"%}
            Fault 
            {% elif (states('sensor.inverter_state_code')) == "6"%}
            Idle 
            {% else%}
            Unknown
            {% endif %}

  - trigger:
    - platform: state
      entity_id: sensor.battery_discharge_power
    sensor: 

  - trigger:
    - platform: time_pattern
      seconds: "20"
    sensor:  
      - name: "PV Power Now"
        unique_id: foxess_inv1_pv_power_now
        device_class: "power"
        unit_of_measurement: "W"
        state: >
              {{ (states('sensor.pv1_power') | float(default=0) + states('sensor.pv2_power') | float(default=0) ) }}            
      - name: "Inverter Load power"
        device_class: "power"
        unit_of_measurement: "W"
        state: >
               {{ (states('sensor.load_power_r') | float(default=0)
               + states('sensor.load_power_s') | float(default=0)
               + states('sensor.load_power_t') | float(default=0)) | round(2) }}
      - name: "Inverter EPS power" 
        unique_id: foxess_inv1_eps_power
        device_class: "power"
        unit_of_measurement: "W"
        state: >
               {{ (states('sensor.eps_power_r') | float(default=0)
               + states('sensor.eps_power_s') | float(default=0)
               + states('sensor.eps_power_t') | float(default=0)) | round(1) }}
      - name: "Inverter Out power"
        unique_id: foxess_inv1_out_power
        device_class: "power"
        unit_of_measurement: "W"
        state: >
               {{ (states('sensor.inv_power_r') | float(default=0)
               + states('sensor.inv_power_s') | float(default=0)
               + states('sensor.inv_power_t') | float(default=0)) | round(1) }}    
      - name: "Meter Power"
        unique_id: foxess_meter_power
        device_class: "power"
        unit_of_measurement: "W" #negative=consumption/importing from grid
        state: >
            {{ states('sensor.meter_power_r') | float(default=0)
            + states('sensor.meter_power_s') | float(default=0)
            + states('sensor.meter_power_t') | float(default=0)
            }}         
      - name: "House load Power"
        unique_id: house_load
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {{(states('sensor.meter_power')|float(default=0))*-1
              +states('sensor.inverter_out_power')|float(default=0)}}
       - name: "Inverter System Losses"
        unique_id: foxess_inv1_system_losses
        device_class: "power"
        unit_of_measurement: "W"
        state: >
               {{ ((states('sensor.pv1_power') | float(default=0)
               + states('sensor.pv2_power') | float(default=0)
               + states('sensor.battery_discharge_power') | float(default=0) 
               - states('sensor.inverter_eps_power') | float(default=0) )
               - states('sensor.inverter_out_power') | float(default=0)) | round(2) }}    
       - name: "EPS remaining time"
        device_class: "duration"
        unit_of_measurement: "hours"
        # hardcoded values here: 20% minimum SoC (not usable), 14kWh battery total capacity -> 140 kwh/% strange unit
        state: >
               {{ (((states('sensor.battery_soc') | float(default=0)) -20)*140
               / (states('sensor.inverter_load_power') | float(default=0))) | round(2) }}              
              
  - trigger:
    - platform: time_pattern
      minutes: "5"
    sensor:
      - name: autarky
        unique_id: pv_autarky
        unit_of_measurement: "%"
        #precision: 1
        state: >
          {{((1-((states('sensor.meter_consumption_energy_daily')|float(default=0))/
          ((states('sensor.inv_load_energy_daily')|float(default=0.0))+(states('sensor.inverter_input_energy_daily')|float(default=0)))
          ))*100)| round(1)}}
          
# Utility Meters - Provides meters to be used with the energy dashboard and reset daily
utility_meter:
  pv1_daily:
    source: sensor.pv1_sum
    cycle: daily
  pv2_daily:
    source: sensor.pv2_sum
    cycle: daily
 # losses_daily:
 #   source: sensor.losses_sum
 #   cycle: daily
